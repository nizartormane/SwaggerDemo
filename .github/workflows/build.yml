name: SonarQube Analysis

on:
  push:
    branches:
      - main  # Déclencher sur push dans la branche main, ajuster si nécessaire
  pull_request:
    branches:
      - main  # Déclencher lors des PRs vers la branche main

jobs:
  build:
    runs-on: ubuntu-latest  # Utiliser un environnement Linux, mais tu peux utiliser macOS si nécessaire

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'  # Ajuste la version de .NET en fonction de ton projet

      - name: Install SonarScanner for MSBuild
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarQube analysis
        run: |
          dotnet sonarscanner begin /k:"my-new-project-key" \
            /d:sonar.host.url="http://localhost:9000" \
            /d:sonar.login="sqa_a37e9475471d9823285321e694382d135850ba21" \
            /d:sonar.scanner.scanAll=false

      - name: Build the project
        run: |
          dotnet build

      - name: End SonarQube analysis
        run: |
          dotnet sonarscanner end /d:sonar.login="sqa_a37e9475471d9823285321e694382d135850ba21" \
            /d:sonar.password="sqa_a37e9475471d9823285321e694382d135850ba21"

      - name: Upload results to SonarQube
        run: |
          curl -X POST "http://localhost:9000/api/ce/submit"  # Optionnel, si tu veux envoyer explicitement les résultats via une requête API





# name: Build

# on:
#   push:
#     branches:
#       - main


# jobs:
#   build:
#     name: Build
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.11
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#           path: ~\sonar\cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache SonarQube scanner   
#         id: cache-sonar-scanner
#         uses: actions/cache@v1
#         with:
#           path: .\.sonar\scanner
#           key: ${{ runner.os }}-sonar-scanner  
#           restore-keys: ${{ runner.os }}-sonar-scanner
#       - name: Install SonarQube scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: powershell
#         run: |
#           New-Item -Path .\.sonar\scanner -ItemType Directory
#           dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#         shell: powershell
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"new-SWAGGER" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
#           dotnet build
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"


# name: SonarQube
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     types: [opened, synchronize, reopened]
# jobs:
#   build:
#     name: Build and analyze
#     runs-on: windows-latest
#     steps:
#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           java-version: 17
#           distribution: 'zulu' # Alternative distribution options are available.
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Cache SonarQube Cloud packages
#         uses: actions/cache@v4
#         with:
#           path: ~\sonar\cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache SonarQube Cloud scanner
#         id: cache-sonar-scanner
#         uses: actions/cache@v4
#         with:
#           path: .\.sonar\scanner
#           key: ${{ runner.os }}-sonar-scanner
#           restore-keys: ${{ runner.os }}-sonar-scanner
#       - name: Install SonarQube Cloud scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: powershell
#         run: |
#           New-Item -Path .\.sonar\scanner -ItemType Directory
#           dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#       - name: Build and analyze
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         shell: powershell
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"nizartormane_SwaggerDemo" /o:"nizartormane" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
#           dotnet build
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: '8.0.x'

#       - name: Restore Dependencies
#         run: dotnet restore src/SwaggerDemo.HttpApi.Host

#       - name: Build Project
#         run: dotnet build src/SwaggerDemo.HttpApi.Host --configuration Release --no-restore

#       - name: Publish Project
#         run: dotnet publish src/SwaggerDemo.HttpApi.Host --configuration Release --output publish

#       - name: Upload Published App
#         uses: actions/upload-artifact@v4
#         with:
#           name: abp-app
#           path: publish/

#       - name: Install SonarScanner
#         run: dotnet tool install --global dotnet-sonarscanner

#       - name: Start SonarQube
#         run: |
#           docker run -d --name sonarqube -p 9000:9000 sonarqube:lts
#           echo "Waiting for SonarQube to start..."
          
#           # Attendre jusqu'à ce que SonarQube soit UP
#           for i in {1..30}; do
#             STATUS=$(curl -s http://localhost:9000/api/system/status | grep -o '"status":"[^"]*"' | awk -F':' '{print $2}' | tr -d '"')
#             echo "SonarQube status: $STATUS"
#             if [ "$STATUS" == "UP" ]; then
#               echo "SonarQube is UP!"
#               break
#             fi
#             echo "Waiting for SonarQube..."
#             sleep 10
#           done

#       - name: Run SonarScanner
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Utiliser le token depuis les secrets GitHub
#         run: |
#           dotnet sonarscanner begin /k:"SWAGGERDEMOKEY" /d:sonar.host.url="http://localhost:9000" /d:sonar.login="$SONAR_TOKEN"
#           dotnet build src/SwaggerDemo.HttpApi.Host --configuration Release
#           dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"







# name: Build

# on:
#   push:
#     branches:
#       - main


# jobs:
#   build:
#     name: Build
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.11
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#           path: ~\sonar\cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache SonarQube scanner
#         id: cache-sonar-scanner
#         uses: actions/cache@v1
#         with:
#           path: .\.sonar\scanner
#           key: ${{ runner.os }}-sonar-scanner
#           restore-keys: ${{ runner.os }}-sonar-scanner
#       - name: Install SonarQube scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: powershell
#         run: |
#           New-Item -Path .\.sonar\scanner -ItemType Directory
#           dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#         shell: powershell
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"SWAGGERDEMOKEY" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
#           dotnet build
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"



# name: Build ABP .NET App

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: '8.0.x'

#       - name: Restore Dependencies
#         run: dotnet restore src/SwaggerDemo.HttpApi.Host

#       - name: Build Project
#         run: dotnet build src/SwaggerDemo.HttpApi.Host --configuration Release --no-restore

#       - name: Publish Project
#         run: dotnet publish src/SwaggerDemo.HttpApi.Host --configuration Release --output publish

#       - name: Upload Published App
#         uses: actions/upload-artifact@v4
#         with:
#           name: abp-app
#           path: publish/

#       - name: Install SonarScanner
#         run: |
#           dotnet tool install --global dotnet-sonarscanner

#       - name: Start SonarQube
#         run: |    
#           docker run -d --name sonar -p 9000:9000 sonarqube:lts
#           sleep 60  # Attendre que SonarQube démarre complètement

#       - name: Run SonarScanner
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     
#           SONAR_HOST_URL: "http://localhost:9000"
#         run: |
#           dotnet sonarscanner begin /k:"new-p-dotnet" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.login="$SONAR_TOKEN"
#           dotnet build src/SwaggerDemo.HttpApi.Host --configuration Release
#           dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
