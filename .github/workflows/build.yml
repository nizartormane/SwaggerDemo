name: Build and SonarQube Analysis

on:
  push:
    branches:
      - main

env:
  DOTNET_VERSION: '8.0'
  BUILD_CONFIGURATION: 'Release'
  SONAR_PROJECT_KEY: 'my-new-project-key'

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install SonarScanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner
    - name: Clear SonarQube Scanner cache
      run: rm -rf ~/.sonar/cache


    - name: Start SonarQube Analysis
      run: |
        dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" \
          /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
          /d:sonar.scanner.scanAll=false

    - name: Build project
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }}

    - name: End SonarQube Analysis
      run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
    



# name: Build and SonarQube Analysis
####
# on:
#   push:
#     branches:
#       - main

# env:
#   DOTNET_VERSION: '8.0'
#   BUILD_CONFIGURATION: 'Release'
#   SONAR_PROJECT_KEY: 'my-new-project-key'

# jobs:
#   sonar-analysis:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Check out repository
#       uses: actions/checkout@v2

#     - name: Setup .NET ${{ env.DOTNET_VERSION }}
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}

#     - name: Install SonarScanner for .NET
#       run: dotnet tool install --global dotnet-sonarscanner

#     - name: Start SonarQube Analysis
#       run: |
#         dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}"\
#           /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }}\
#           /d:sonar.login=${{ secrets.SONAR_TOKEN }}\   
#           /d:sonar.scanner.scanAll=false

#     - name: Build project
#       run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }}

#     - name: End SonarQube Analysis
#       run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }} //////

    # - name: Run tests
    #   run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }}






# name: Build and SonarQube Analysis

# on:
#   push:
#     branches:
#       - main       

# jobs:
#   sonar-analysis:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Check out repository
#       uses: actions/checkout@v2

#     - name: Setup .NET 8.0
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: '8.0'

#     - name: Install SonarScanner for .NET
#       run: |
#         dotnet tool install --global dotnet-sonarscanner
  
#     - name: Start SonarQube Analysis
#       run: |
#         dotnet sonarscanner begin /k:"my-new-project-key" /d:sonar.host.url= ${{ secrets.SONAR_HOST_URL }}  
#         /d:sonar.login= ${{secrets.SONAR_TOKEN}}  /d:sonar.scanner.scanAll=false
#         dotnet build
#     - name: End SonarQube Analysis        
#       run: |
#         dotnet sonarscanner end /d:sonar.login=${{secrets.SONAR_TOKEN}} 
































# name: Build Pipeline

# on:
#   push:
#     branches:
#       - main       

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Check out repository
#       uses: actions/checkout@v2

#     - name: Setup .NET 8.0
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: '8.0'

#     - name: Restore dependencies
#       run: dotnet restore 

#     - name: Build project
#       run: dotnet build --configuration Release

#     - name: Run tests
#       run: dotnet test --configuration Release










