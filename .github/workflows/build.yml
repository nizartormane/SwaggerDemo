on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore src/SwaggerDemo.HttpApi.Host

      - name: Build Project
        run: dotnet build src/SwaggerDemo.HttpApi.Host --configuration Release --no-restore

      - name: Publish Project
        run: dotnet publish src/SwaggerDemo.HttpApi.Host --configuration Release --output publish

      - name: Upload Published App
        uses: actions/upload-artifact@v4
        with:
          name: abp-app
          path: publish/
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "Checking if SonarScanner is installed..."
          dotnet sonarscanner --version

      - name: Start SonarQube
        run: |
          docker run -d --name sonarqube -p 9000:9000 sonarqube:lts
          echo "Waiting for SonarQube to start..."
          for i in {1..10}; do
            if curl -s http://localhost:9000/api/system/status | grep -q "UP"; then
              echo "SonarQube is UP!"
              break
            fi
            echo "Waiting for SonarQube..."
            sleep 10
          done

          dotnet sonarscanner begin /k:"SWAGGERDEMOKEY" /d:sonar.host.url="http://localhost:9000" /d:sonar.login="sqp_9fb6d428428fa1ec18cf3dbfa3a20f46dd3cf8d9"
          dotnet build
          dotnet sonarscanner end /d:sonar.login="sqp_9fb6d428428fa1ec18cf3dbfa3a20f46dd3cf8d9"






# name: Build

# on:
#   push:
#     branches:
#       - main


# jobs:
#   build:
#     name: Build
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.11
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#           path: ~\sonar\cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache SonarQube scanner
#         id: cache-sonar-scanner
#         uses: actions/cache@v1
#         with:
#           path: .\.sonar\scanner
#           key: ${{ runner.os }}-sonar-scanner
#           restore-keys: ${{ runner.os }}-sonar-scanner
#       - name: Install SonarQube scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: powershell
#         run: |
#           New-Item -Path .\.sonar\scanner -ItemType Directory
#           dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#         shell: powershell
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"SWAGGERDEMOKEY" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
#           dotnet build
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"



# name: Build ABP .NET App

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: '8.0.x'

#       - name: Restore Dependencies
#         run: dotnet restore src/SwaggerDemo.HttpApi.Host

#       - name: Build Project
#         run: dotnet build src/SwaggerDemo.HttpApi.Host --configuration Release --no-restore

#       - name: Publish Project
#         run: dotnet publish src/SwaggerDemo.HttpApi.Host --configuration Release --output publish

#       - name: Upload Published App
#         uses: actions/upload-artifact@v4
#         with:
#           name: abp-app
#           path: publish/

#       - name: Install SonarScanner
#         run: |
#           dotnet tool install --global dotnet-sonarscanner

#       - name: Start SonarQube
#         run: |    
#           docker run -d --name sonar -p 9000:9000 sonarqube:lts
#           sleep 60  # Attendre que SonarQube démarre complètement

#       - name: Run SonarScanner
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     
#           SONAR_HOST_URL: "http://localhost:9000"
#         run: |
#           dotnet sonarscanner begin /k:"new-p-dotnet" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.login="$SONAR_TOKEN"
#           dotnet build src/SwaggerDemo.HttpApi.Host --configuration Release
#           dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
